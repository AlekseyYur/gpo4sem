@page "/CenterMenu"
@using System.Data; 
@using BlazorBootstrap;
@using BlazorApp3.Model
@using BlazorApp3.Model.Operation
@using BlazorApp3.Model.Categories
<div class="Center_menu">
    @if (UserStorage.CurrentUser != null)
    {

        <div class="Chart-container">
            <PieChart @ref="PieChart" Width="500" />
            <div class="Chart-container__list">
                @foreach (Category x in GetCategories())
                {
                    <div class="Chart-container__list-member"> @GetTotal(x) Rub </div>

                }
                @if (UserStorage.CurrentUser.Purchase_Limit > UserStorage.CurrentUser.Purchase_Amount(DateTime.MinValue, DateTime.MaxValue))
                {
                    <div class="Chart-container__list-member"> @(UserStorage.CurrentUser.Purchase_Limit - UserStorage.CurrentUser.Purchase_Amount(DateTime.MinValue, DateTime.MaxValue)) Rub </div>
                }
            </div>

        </div>
        @if (UserStorage.CurrentUser.Purchase_Limit > UserStorage.CurrentUser.Purchase_Amount(DateTime.MinValue, DateTime.MaxValue))
        {
            <div class=" total">
                <div class="amount">@UserStorage.CurrentUser.Purchase_Amount(DateTime.MinValue, DateTime.MaxValue) </div>
                <div class="limit">/ @UserStorage.CurrentUser.Purchase_Limit</div>
            </div>
        }
        @if (UserStorage.CurrentUser.Purchase_Limit < UserStorage.CurrentUser.Purchase_Amount(DateTime.MinValue, DateTime.MaxValue))
        {
            <div class=" total">
                <div class="amountRED">@UserStorage.CurrentUser.Purchase_Amount(DateTime.MinValue, DateTime.MaxValue) </div>
                <div class="limit">/ @UserStorage.CurrentUser.Purchase_Limit</div>
            </div>
            <div> Вы превысили лимит по расходам!</div>
        }

    }
</div>





@code {
    private PieChart PieChart = default!;
    private PieChartOptions pieChartOptions = default!;
    private ChartData chartData = default!;
    private string[]? backgroundColors;
    int datala=0;
    List<IChartDataset> datasets = new List<IChartDataset>();

    protected override void OnInitialized()
    {
        if (UserStorage.CurrentUser != null)
        {
            
            backgroundColors = ColorBuilder.CategoricalTwelveColors;

            List<string> temp_list = new();
            foreach (Category item in GetCategories())
            {
                datala += 1;
                string temp2 =(string) (Enum.GetName(item));
                temp_list.Add(temp2);

            }
            if (UserStorage.CurrentUser.Purchase_Limit > UserStorage.CurrentUser.Purchase_Amount(DateTime.MinValue, DateTime.MaxValue))
            {
                temp_list.Add("Left");
            }
            datasets.Add(new PieChartDataset() { Label = "", Data = GetDataset(), BackgroundColor = GetRandomBackgroundColors() });



            chartData = new ChartData { Labels = temp_list, Datasets = datasets };

            pieChartOptions = new();
            pieChartOptions.Responsive = true;
            pieChartOptions.Plugins.Title.Text = "Расходы";
            pieChartOptions.Plugins.Title.Display = true;
            pieChartOptions.Plugins.Legend.Position = "right";

        }


    }
    private List<double> GetDataset()
    {
        var data = new List<double>();
        double temp=0;
        foreach (Category cat in Enum.GetValues(typeof(Category)))
        {
            foreach (Purchase item in UserStorage.CurrentUser.Purchases)
            {
                if (item.Category == cat)
                {
                    temp += item.Price;
                }
            }
            data.Add(temp);
            temp = 0;
        }
        if (UserStorage.CurrentUser.Purchase_Limit > UserStorage.CurrentUser.Purchase_Amount(DateTime.MinValue, DateTime.MaxValue))
        {
            data.Add(UserStorage.CurrentUser.Purchase_Limit - UserStorage.CurrentUser.Purchase_Amount(DateTime.MinValue, DateTime.MaxValue));
        }
        return data;
    }

    private List<string> GetRandomBackgroundColors()
    {
        var colors = new List<string>();
        for (var index = 0; index < datala ; index++)
        {
            colors.Add(backgroundColors![index]);
        }
        if (UserStorage.CurrentUser.Purchase_Limit > UserStorage.CurrentUser.Purchase_Amount(DateTime.MinValue, DateTime.MaxValue))
        {
            colors.Add("Grey");
        }
        return colors;
    }
    private float GetTotal(Category cat)
    {
        if (UserStorage.CurrentUser != null)
        {
            float temp = 0;
            foreach (Purchase item in UserStorage.CurrentUser.Purchases)
            {
                if (item.Category == cat)
                {
                    temp += item.Price;
                }
            }
            return temp;
        }
        else
        {
            return 0;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender & UserStorage.CurrentUser!=null)
        {
            await PieChart.InitializeAsync(chartData, pieChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    private List<Category> GetCategories()
    {
            List<Category> cats = new();
            foreach (Category cat in Enum.GetValues(typeof(Category)))
            {
                foreach (Purchase item in UserStorage.CurrentUser.Purchases)
                {
                    if (item.Category == cat & !cats.Exists( x=>x==item.Category) )
                    {
                        cats.Add(item.Category);
                    }
                }
            }

            return cats;
        
       
    }

}
